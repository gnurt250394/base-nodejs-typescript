import { resolve as pathResolve } from 'path';
import { config } from 'dotenv';

const { env } = process;
config({ path: pathResolve(__dirname, `./env/.env.${env.NODE_ENV}`) });

export default {
  /** --------------------start END POINT--------------------- */
  sendMessage: '/send-message',
  getMessage: '/get-message',
  getRoom: '/get-rooms',
  createQuestion: '/create-question',
  login: '/login',
  register: '/register',
  forgotPassword: '/forgot-password',
  getAllVideo: '/get-all-video',
  upload: '/uploads',
  getProvince: '/province',
  getDistrict: '/district',
  getCommune: '/commune',
  checkPhone: '/check-phone',
  logout: '/logout',
  importUser: '/import-user',
  getDetail: '/detail',
  getDetailPartner: '/detail-partner',
  updateAvatar: '/update-avatar',
  updateProfile: '/update-profile',
  activeProfile: '/active-profile',
  createField: '/create-field',
  getListFields: '/get-list-fields',
  getListFieldSelected: '/get-list-field-selected',
  field: '/field',
  deleteField: '/delete-field',
  insertField: '/insert-field',
  createFieldSelected: '/create-field-selected',
  updateFieldSelected: '/update-field-selected',
  getListMedicalRecord: '/list-medical-record',
  getListUser: '/list-user',
  createJob: '/create-job',
  getAllJob: '/get-all-job',
  getListJob: '/get-list-job',
  deleteJob: '/delete-job',
  importJob: '/import-job',
  detailJob: '/detail-job',
  detailRequestInterview: '/detail-request-interview',
  detailRequestInterviewPartner: '/detail-request-interview/partner',
  activeJob: '/active-job',
  acceptRequestInterview: '/accept-request-interview',
  sendEmail: '/send-email',
  submitProfile: '/submit-profile',
  submittedProfile: '/submitted-profile',
  receivedProfile: '/received-profile',
  requestInterview: '/request-interview',
  listCreateJob: '/list-create-job',
  listInterviewPartner: '/list-interview/partner',
  listRequestInterview: '/list-request-interview',
  manageRequestInterview: '/manage-request-interview',
  manageRequestInterviewPartner: '/manage-request-interview/partner',
  listCurriculumVitae: '/list-curriculum-vitae',
  detailCurriculumVitae: '/detail-curriculum-vitae',
  readNotification: '/read-notification',
  listNotification: '/list-notification',
  removeNotification: '/remove-notification',
  getReadNotification: '/get-read-notification',

  /** --------------------end END POINT--------------------- */
  prefix: '/api/v1/',

  environment: env.NODE_ENV,
  secretKey: env.SECRET_KEY,
  refressTokenSecretKey: env.REFRESS_TOKEN_SECRET_KEY,
  keyId: env.KEY_ID,
  teamId: env.TEAM_ID,
  firebaseUrl: env.FIREBASE_URL,
  port: Number(env.PORT),
  mongoConnectionString: env.MONGO_CONNECTION_STRING,
  SQL: {
    db: env.SQL_DB,
    username: env.SQL_USERNAME,
    password: env.SQL_PASSWORD,
    host: env.SQL_HOST,
    port: Number(env.SQL_PORT),
    dialect: env.SQL_DIALECT,
  },
  AWS: {
    accessKeyId: env.AWS_ACCESS_KEY_ID,
    secretAccessKey: env.AWS_SECRET_ACCESS_KEY,
    mainBucket: env.AWS_MAINBUCKET,
  },
  auth0: {
    domain: env.AUTH0_DOMAIN,
    clientId: env.AUTH0_CLIENT_ID,
    clientSecret: env.AUTH0_CLIENT_SECRET,
    audience: env.AUTH0_AUDIENCE,
  },
  pubnub: {
    publishKey: env.PUBNUB_PUBLISH_KEY,
    subscribeKey: env.PUBNUB_SUBSCRIBE_KEY,
    secretKey: env.PUBNUB_SECRET_KEY,
  },
  errorTypes: {
    db: { statusCode: 500, name: 'Internal Server Error', message: 'database error' },
    validation: { statusCode: 400, name: 'Bad Request', message: 'Dữ liệu không hợp lệ' },
    auth: { statusCode: 401, name: 'Unauthorized', message: 'Phiên đăng nhập hết hạn' },
    forbidden: { statusCode: 403, name: 'Forbidden', message: 'forbidden content' },
    notFound: { statusCode: 404, name: 'Not Found', message: 'content not found' },
    entity: { statusCode: 422, name: 'Unprocessable Entity', message: 'entity error' },
  },
  get errorMap() {
    return {
      ValidateError: this.errorTypes.validation,
      ValidationError: this.errorTypes.validation,
      CastError: this.errorTypes.db,
    };
  },
};
